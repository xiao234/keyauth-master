// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package geoip

import (
	"bytes"
	"fmt"
	"strings"
)

var (
	// DBFileContentType_name name map
	DBFileContentType_name = map[DBFileContentType]string{
		IPv4Content: "ipv4",
	}

	// DBFileContentType_value value map
	DBFileContentType_value = map[string]DBFileContentType{
		"ipv4": IPv4Content,
	}
)

// ParseDBFileContentTypeFromString Parse DBFileContentType from string
func ParseDBFileContentTypeFromString(str string) (DBFileContentType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := DBFileContentType_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown DBFileContentType: %s", str)
	}

	return DBFileContentType(v), nil
}

// Equal type compare
func (t DBFileContentType) Equal(target DBFileContentType) bool {
	return t == target
}

// IsIn todo
func (t DBFileContentType) IsIn(targets ...DBFileContentType) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// String stringer
func (t DBFileContentType) String() string {
	v, ok := DBFileContentType_name[t]
	if !ok {
		return "unknown"
	}

	return v
}

// MarshalJSON todo
func (t DBFileContentType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *DBFileContentType) UnmarshalJSON(b []byte) error {
	ins, err := ParseDBFileContentTypeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
